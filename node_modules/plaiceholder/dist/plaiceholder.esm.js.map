{"version":3,"file":"plaiceholder.esm.js","sources":["../src/index.ts"],"sourcesContent":["import sharp, { type Sharp, type Metadata, OutputInfo } from \"sharp\";\n\n/* Utils\n   =========================================== */\n\nconst arrayChunk = (arr, size) =>\n  arr.length > size\n    ? [arr.slice(0, size), ...arrayChunk(arr.slice(size), size)]\n    : [arr];\n\ntype ToRGBAStringOptions = { r: number; g: number; b: number; a?: number };\n\nconst toRGBAString = ({ r, g, b, a }: ToRGBAStringOptions) => {\n  if (typeof a === \"undefined\") return `rgb(${[r, g, b].join(\",\")})`;\n\n  return `rgba(${[r, g, b, a].join(\",\")})`;\n};\n\n/* getPixels\n   =========================================== */\n\ninterface GetPixelsOptions {\n  data: Buffer;\n  info: sharp.OutputInfo;\n}\n\ntype GetPixelsReturn = ReturnType<typeof getPixels>;\n\nconst getPixels = ({ data, info }: GetPixelsOptions) => {\n  const { channels, width } = info;\n\n  const rawBuffer = [].concat(...data) as number[];\n  const allPixels = arrayChunk(rawBuffer, channels) as number[][][];\n  const rows = arrayChunk(allPixels, width) as number[][][];\n\n  const pixels = rows.map((row) =>\n    row.map((pixel) => {\n      const [r, g, b, a] = pixel;\n\n      return {\n        r,\n        g,\n        b,\n        ...(typeof a === \"undefined\"\n          ? {}\n          : { a: Math.round((a / 255) * 1000) / 1000 }),\n      };\n    })\n  );\n\n  return pixels;\n};\n\n/* getCSS\n   =========================================== */\n\ninterface GetCSSOptions {\n  info: OutputInfo;\n  pixels: GetPixelsReturn;\n}\n\ntype GetCSSReturn = ReturnType<typeof getCSS>;\n\nconst getCSS = ({ pixels, info }: GetCSSOptions) => {\n  const linearGradients = pixels.map((row) => {\n    const rowPixels = row.map((pixel) => toRGBAString(pixel));\n\n    const gradient = rowPixels\n      .map((pixel, i) => {\n        const start = i === 0 ? \"\" : ` ${(i / rowPixels.length) * 100}%`;\n        const end =\n          i === rowPixels.length\n            ? \"\"\n            : ` ${((i + 1) / rowPixels.length) * 100}%`;\n\n        return `${pixel}${start}${end}`;\n      })\n      .join(\",\");\n\n    return `linear-gradient(90deg, ${gradient})`;\n  });\n\n  if (linearGradients.length !== info.height) {\n    console.error(\n      \"Woops! Something went wrong here and caused the color height to differ from the source height.\"\n    );\n  }\n\n  const backgroundPosition = linearGradients\n    .map((_, i) =>\n      i === 0 ? \"0 0 \" : `0 ${(i / (linearGradients.length - 1)) * 100}%`\n    )\n    .join(\",\");\n\n  const backgroundSize = `100% ${100 / linearGradients.length}%`;\n\n  return {\n    backgroundImage: linearGradients.join(\",\"),\n    backgroundPosition,\n    backgroundSize,\n    backgroundRepeat: \"no-repeat\",\n  };\n};\n\n/* getSVG\n   =========================================== */\n\ntype TRects = [\n  \"rect\",\n  Record<\"width\" | \"height\" | \"x\" | \"y\" | \"fillOpacity\", {} & number> &\n    Record<\"fill\", {} & string>\n];\n\ninterface IGetSVGOptions {\n  info: OutputInfo;\n  pixels: GetPixelsReturn;\n}\n\ntype GetSVGReturn = [\n  \"svg\",\n  {\n    viewBox: string;\n    width: string;\n    height: string;\n    shapeRendering: string;\n    preserveAspectRatio: string;\n    style: any;\n    xmlns: string;\n  },\n  TRects[]\n];\n\ninterface IGetSVG {\n  (options: IGetSVGOptions): GetSVGReturn;\n}\n\nconst getSVG: IGetSVG = ({ pixels, info }) => {\n  const chunkRects = pixels.map((row, y) =>\n    row.map(({ a, ...rgb }, x) => {\n      const colorProps =\n        typeof a !== \"undefined\"\n          ? { fill: toRGBAString(rgb), \"fill-opacity\": a }\n          : { fill: toRGBAString(rgb), \"fill-opacity\": 1 };\n\n      return [\n        \"rect\",\n        {\n          ...colorProps,\n          width: 1,\n          height: 1,\n          x,\n          y,\n        },\n      ];\n    })\n  );\n\n  if (chunkRects.length !== info.height) {\n    console.error(\n      \"Woops! Something went wrong here and caused the color height to differ from the source height.\"\n    );\n  }\n\n  const rects: TRects[] = [].concat(...chunkRects);\n\n  return [\n    \"svg\",\n    {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: \"100%\",\n      height: \"100%\",\n      shapeRendering: \"crispEdges\",\n      preserveAspectRatio: \"none\",\n      viewBox: `0 0 ${info.width} ${info.height}`,\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transformOrigin: \"top left\",\n        transform: \"translate(-50%, -50%)\",\n        right: 0,\n        bottom: 0,\n      },\n    },\n    rects,\n  ];\n};\n\n/* getPlaiceholder\n   =========================================== */\n\ntype SharpFormatOptions = Parameters<Sharp[\"toFormat\"]>;\ntype SharpModulateOptions = NonNullable<Parameters<Sharp[\"modulate\"]>[0]>;\n\nexport type GetPlaiceholderSrc = Buffer;\n\nexport interface GetPlaiceholderOptions extends SharpModulateOptions {\n  autoOrient?: boolean;\n  size?: number;\n  format?: SharpFormatOptions;\n  removeAlpha?: boolean;\n}\n\nexport interface GetPlaiceholderReturn {\n  metadata: Omit<Metadata, \"width\" | \"height\"> &\n    Required<Pick<Metadata, \"width\" | \"height\">>;\n  base64: string;\n  color: {\n    hex: string;\n    r: number;\n    g: number;\n    b: number;\n  };\n  pixels: GetPixelsReturn;\n  css: GetCSSReturn;\n  svg: GetSVGReturn;\n}\n\nexport const getPlaiceholder = async (\n  src: GetPlaiceholderSrc,\n  {\n    autoOrient = false,\n    size = 4,\n    format = [\"png\"],\n    brightness = 1,\n    saturation = 1.2,\n    removeAlpha = false,\n    ...options\n  }: GetPlaiceholderOptions = {}\n) => {\n  /* Optimize\n    ---------------------------------- */\n\n  const metadata = await sharp(src)\n    .metadata()\n    .then(({ width, height, ...metadata }) => {\n      if (!width || !height) {\n        throw Error(\"Could not get required image metadata\");\n      }\n\n      return { width, height, ...metadata };\n    });\n\n  const sizeMin = 4;\n  const sizeMax = 64;\n\n  const isSizeValid = sizeMin <= size && size <= sizeMax;\n\n  !isSizeValid &&\n    console.error(\n      [\"Please enter a `size` value between\", sizeMin, \"and\", sizeMax].join(\" \")\n    );\n\n  // initial optimization\n  const pipelineStage1 = sharp(src)\n    .resize(size, size, {\n      fit: \"inside\",\n    })\n    .toFormat(...format)\n    .modulate({\n      brightness,\n      saturation,\n      ...(options?.hue ? { hue: options?.hue } : {}),\n      ...(options?.lightness ? { lightness: options?.lightness } : {}),\n    });\n\n  // alpha\n  const pipelineStage2 =\n    removeAlpha === false ? pipelineStage1 : pipelineStage1.removeAlpha();\n\n  // autoOrientation\n  const pipelineStage3 =\n    autoOrient === false ? pipelineStage2 : pipelineStage2.rotate();\n\n  const pipeline = pipelineStage3;\n\n  /* Return\n    ---------------------------------- */\n\n  const color = await pipeline\n    .clone()\n    .stats()\n    .then(({ dominant: { r, g, b } }) => {\n      return {\n        r,\n        g,\n        b,\n        hex:\n          \"#\" + [r, g, b].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\"),\n      };\n    });\n\n  const base64 = await pipeline\n    .clone()\n    .normalise()\n    .toBuffer({ resolveWithObject: true })\n    .then(\n      ({ data, info }) =>\n        `data:image/${info.format};base64,${data.toString(\"base64\")}`\n    )\n    .catch((err) => {\n      console.error(\"base64 generation failed\", err);\n      throw err;\n    });\n\n  const { pixels, css, svg } = await pipeline\n    .clone()\n    .raw()\n    .toBuffer({ resolveWithObject: true })\n    .then(({ data, info }) => {\n      const pixels = getPixels({ data, info });\n      const css = getCSS({ pixels, info });\n      const svg = getSVG({ pixels, info });\n\n      return {\n        pixels,\n        css,\n        svg,\n      };\n    })\n    .catch((err) => {\n      console.error(\"pixel generation failed\", err);\n      throw err;\n    });\n\n  return {\n    color,\n    css,\n    base64,\n    metadata,\n    pixels,\n    svg,\n  };\n};\n"],"names":["arrayChunk","arr","size","length","slice","toRGBAString","r","g","b","a","join","getPixels","data","info","channels","width","rawBuffer","concat","allPixels","rows","pixels","map","row","pixel","Math","round","getCSS","linearGradients","rowPixels","gradient","i","start","end","height","console","error","backgroundPosition","_","backgroundSize","backgroundImage","backgroundRepeat","getSVG","chunkRects","y","x","rgb","colorProps","fill","rects","xmlns","shapeRendering","preserveAspectRatio","viewBox","style","position","top","left","transformOrigin","transform","right","bottom","getPlaiceholder","src","autoOrient","format","brightness","saturation","removeAlpha","options","sharp","metadata","then","Error","sizeMin","sizeMax","isSizeValid","pipelineStage1","resize","fit","toFormat","modulate","hue","lightness","pipelineStage2","pipelineStage3","rotate","pipeline","clone","stats","dominant","hex","toString","padStart","color","normalise","toBuffer","resolveWithObject","err","base64","raw","css","svg"],"mappings":"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"}